# -*- coding: utf-8 -*-
"""Copy of Housing analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNQowsbPt8ip0AlBslmRy6300c5b98Ek
"""

from google.colab import files
import pandas as pd

# Upload the dataset file from your local machine
uploaded = files.upload()

import io

# Read the uploaded file into a Pandas DataFrame
df = pd.read_csv(io.BytesIO(uploaded['Housing.csv']))

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import r2_score,mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.svm import SVR
from sklearn.linear_model import Lasso, Ridge
!pip install catboost
from catboost import CatBoostRegressor
from lightgbm import LGBMRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score

# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")

df.sample(5)

df.info()

df.shape

df.describe()

df.isnull().sum()

df.duplicated().sum()

df.info()

df = df.dropna(subset=['price'])
df = df.dropna(subset=['area'])
df = df.dropna(subset=['bedrooms'])
df = df.dropna(subset=['bathrooms'])
df = df.dropna(subset=['stories'])
df = df.dropna(subset=['parking'])

df['price'] = pd.to_numeric(df['price'], errors='coerce')
df['area'] = pd.to_numeric(df['area'], errors='coerce')
df['bedrooms'] = pd.to_numeric(df['bedrooms'], errors='coerce')
df['bathrooms'] = pd.to_numeric(df['bathrooms'], errors='coerce')
df['stories'] = pd.to_numeric(df['stories'], errors='coerce')
df['parking'] = pd.to_numeric(df['parking'], errors='coerce')

df['price'].fillna(df['price'].mean(), inplace=True)
df['area'].fillna(df['area'].mean(), inplace=True)
df['bedrooms'].fillna(df['bedrooms'].mean(), inplace=True)
df['bathrooms'].fillna(df['bathrooms'].mean(), inplace=True)
df['stories'].fillna(df['stories'].mean(), inplace=True)
df['parking'].fillna(df['parking'].mean(), inplace=True)

df[df['price'] == 'yes']

df = df[df['price'] != 'yes']

df['price'] = df['price'].replace('yes', 0)

df['price'] = pd.to_numeric(df['price'], errors='coerce')

df.corr()

df.copy()

sns.barplot(x=df['airconditioning'],y=df['bedrooms'],hue=df["furnishingstatus"])

sns.barplot(x=df['hotwaterheating'],y=df['bathrooms'],hue=df["furnishingstatus"])

fig, axs = plt.subplots(2,3, figsize = (10,5))
plt1 = sns.boxplot(df['price'], ax = axs[0,0])
plt2 = sns.boxplot(df['area'], ax = axs[0,1])
plt3 = sns.boxplot(df['bedrooms'], ax = axs[0,2])
plt1 = sns.boxplot(df['bathrooms'], ax = axs[1,0])
plt2 = sns.boxplot(df['stories'], ax = axs[1,1])
plt3 = sns.boxplot(df['parking'], ax = axs[1,2])

plt.tight_layout()

Q1 = df.price.quantile(0.25)
Q3 = df.price.quantile(0.75)
IQR = Q3 - Q1
df = df[(df.price >= Q1 - 1.5*IQR) & (df.price <= Q3 + 1.5*IQR)]

plt.boxplot(df.price)

Q1 = df.area.quantile(0.25)
Q3 = df.area.quantile(0.75)
IQR = Q3 - Q1
df = df[(df.area >= Q1 - 1.5*IQR) & (df.area <= Q3 + 1.5*IQR)]
plt.boxplot(df.area)

sns.boxplot(x = 'furnishingstatus', y = 'price', hue = 'airconditioning', data = df)

sns.distplot(df["bathrooms"],hist=False)
sns.distplot(df["bedrooms"],hist=False)

sns.distplot(df["stories"],hist=False)
sns.distplot(df["parking"],hist=False)

sns.heatmap(df.corr(), cmap='viridis',annot=True)

sns.scatterplot(y=df['price'],x=df['area'],hue=df['furnishingstatus'])

sns.pairplot(df,hue="furnishingstatus")

















